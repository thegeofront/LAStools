# [JF] some sources
# https://thatonegamedev.com/cpp/programming-a-c-game-for-the-web-emscripten/
# https://emscripten.org/docs/compiling/Building-Projects.html#building-projects

# [JF] This is what ems has to say:
# Run emconfigure with the normal configure command as an argument.
# emconfigure is called with the normal configure as an argument (in configure-based build systems), and emmake with make as an argument. If your build system uses CMake, replace ./configure with cmake . etc. in the above example. If your build system doesnâ€™t use configure or CMake, then you can omit the first step and just run make (although then you may need to edit the Makefile manually).

# [JF] : But apparantly, this is what actually works 
emcmake cmake . -S . -B build

# Run emmake with the normal make to generate wasm object files.
# emmake make

# Compile the linked code generated by make to JavaScript + WebAssembly.
# 'project.o' should be replaced with the make output for your project, and
# you may need to rename it if it isn't something emcc recognizes
# (for example, it might have a different suffix like 'project.so' or
# 'project.so.1', or no suffix like just 'project' for an executable).
# If the project output is a library, you may need to add your 'main.c' file
# here as well.
# [-Ox] represents build optimisations (discussed in the next section).
# emcc [-Ox] project.o -o project.js